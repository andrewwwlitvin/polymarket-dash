name: Build and publish dashboards

on:
  schedule:
    - cron: "0 */6 * * *"     # every 6 hours (UTC)
  workflow_dispatch:

permissions:
  contents: write              # allow pushes from the workflow

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    concurrency:               # avoid two overlapping pushes on the same ref
      group: deploy-${{ github.ref }}
      cancel-in-progress: false
    env:
      TZ: Europe/Lisbon        # timestamps printed inside pages

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0       # needed for rebase-safe push

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      # ============================
      # 1) FETCH LATEST CSV (FAST)
      # ============================
      - name: Fetch latest markets (fast top-k)
        timeout-minutes: 15
        env:
          PYTHONUNBUFFERED: "1"    # unbuffered logs from Python
        run: |
          set -euo pipefail

          echo "GITHUB_WORKSPACE=$GITHUB_WORKSPACE"
          WORKDIR="$GITHUB_WORKSPACE"
          DATA_DIR="$WORKDIR/data"
          mkdir -p "$DATA_DIR"

          echo "---- repo root listing ----"
          ls -lAh "$WORKDIR" || true

          # Reuse a CSV produced in the last 5 hours to avoid re-fetch when not needed
          recent=$(find "$DATA_DIR" -maxdepth 1 -type f -name 'polymarket_enriched_fast_*.csv' -mmin -300 | sort | tail -n1 || true)
          if [ -n "${recent:-}" ]; then
            echo "Using recent CSV: $recent"
            echo "LATEST_CSV=$recent" >> "$GITHUB_ENV"
          else
            echo "No recent CSV; fetching a new oneâ€¦"
            # NOTE: adjust flags if you like (e.g., --topk 100 for quicker CI runs)
            python -u "$WORKDIR/scripts/polymarket_enriched_fast.py" \
              --topk 120 \
              --concurrency 8 \
              --fast

            echo "---- search for new CSVs at repo top level and scripts/ ----"
            find "$WORKDIR" -maxdepth 2 -type f -name 'polymarket_enriched_fast_*.csv' -printf '%TY-%Tm-%Td %TH:%TM %p\n' | sort || true

            latest=$(find "$WORKDIR" -maxdepth 2 -type f -name 'polymarket_enriched_fast_*.csv' | sort | tail -n1 || true)
            if [ -z "${latest:-}" ]; then
              echo "ERROR: Fetcher did not produce a CSV named polymarket_enriched_fast_*.csv"
              exit 1
            fi

            base=$(basename "$latest")
            mv "$latest" "$DATA_DIR/$base"
            echo "Fetched CSV: $DATA_DIR/$base"
            echo "LATEST_CSV=$DATA_DIR/$base" >> "$GITHUB_ENV"
          fi

          echo "---- list data/ ----"
          ls -lAh "$DATA_DIR" || true

      # ===========================================
      # 2) BUILD SITE FROM THAT EXACT CSV (STRICT)
      # ===========================================
      - name: Generate site (use explicit CSV)
        run: |
          set -euo pipefail

          echo "GITHUB_WORKSPACE=$GITHUB_WORKSPACE"
          echo "LATEST_CSV env: ${LATEST_CSV:-<empty>}"

          if [ -z "${LATEST_CSV:-}" ]; then
            echo "ERROR: LATEST_CSV is not set; aborting to avoid publishing sample data."
            exit 1
          fi
          if [ ! -f "$LATEST_CSV" ]; then
            echo "ERROR: LATEST_CSV path does not exist: $LATEST_CSV"
            echo "Directory listing of $(dirname "$LATEST_CSV"):"
            ls -lAh "$(dirname "$LATEST_CSV")" || true
            exit 1
          fi

          echo "Building site from: $LATEST_CSV"
          head -n 2 "$LATEST_CSV" | sed 's/^/[csv head] /' || true

          python "$GITHUB_WORKSPACE/scripts/build_site_from_csv.py" "$LATEST_CSV"

          echo "---- list site/ after build ----"
          ls -lAh "$GITHUB_WORKSPACE/site" || true

          # HARD GUARD: fail if builder accidentally wrote sample pages
          if grep -q "sample_enriched_20250101_000000.csv" "$GITHUB_WORKSPACE/site/index.html"; then
            echo "ERROR: index.html contains sample marker; refusing to publish."
            exit 1
          fi

          # Show the first lines of the HTML for debugging
          echo "---- index.html head ----"
          head -n 25 "$GITHUB_WORKSPACE/site/index.html" | sed 's/^/[index] /' || true
          echo "---- archive.html head ----"
          head -n 25 "$GITHUB_WORKSPACE/site/archive.html" | sed 's/^/[arch ] /' || true

      # --- diagnostics before committing ---
      - name: Git status before commit
        run: |
          echo "==== git status (before add) ===="
          git status
          echo "==== diff vs HEAD (site/ & data/) ===="
          git diff --name-only HEAD -- site/ data/ || true

      - name: Configure Git
        run: |
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      # --- HARD FAIL if build didn't modify site/ ---
      - name: Verify site/ changed
        run: |
          set -e
          # if nothing changed under site/ (or data/), stop here loudly
          if git diff --quiet HEAD -- site/ data/ ; then
            echo "ERROR: build produced no changes under site/ or data/."
            echo "Tip: ensure the builder writes new content (it prints a new timestamp in <title>)."
            exit 1
          fi

      - name: Commit and push artifacts (rebase-safe)
        env:
          BRANCH_NAME: ${{ github.ref_name }}
        run: |
          set -e

          echo "==== Staging changes (site/, data/) ===="
          git add -A site data

          echo "==== Show staged files ===="
          git diff --cached --name-only

          COMMIT_MSG="Auto-build site $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
          git commit -m "$COMMIT_MSG"

          echo "==== Rebase on latest remote ===="
          git fetch origin "$BRANCH_NAME" --depth=1 || true
          git pull --rebase --autostash origin "$BRANCH_NAME" || true

          echo "==== Push ===="
          git push origin HEAD:"$BRANCH_NAME"

          echo "==== Last commit ===="
          git --no-pager log -1 --stat

