name: Build and publish dashboards

on:
  schedule:
    - cron: "0 */6 * * *"   # every 6 hours (UTC)
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 25      # optional: cap the entire job
    concurrency:
      group: deploy-${{ github.ref }}
      cancel-in-progress: false
      
    env:
      TZ: Europe/Lisbon

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          
      - name: Fetch latest markets (fast top-k)
        timeout-minutes: 15                # cap this step
        env:
          PYTHONUNBUFFERED: "1"           # live logs from Python
        run: |
          set -e
          mkdir -p data
          # If CI_PRESET=1 and your script supports it, lower topk automatically
          python -u scripts/polymarket_enriched_fast.py \
            --topk 100 \
            --concurrency 8 \
            --verbose
          latest=$(ls -1t polymarket_enriched_fast_*.csv 2>/dev/null | head -n1 || true)
          [ -n "$latest" ] && mv "$latest" "data/$latest"

          # 1) Reuse a fresh CSV if one was generated in the last 5 hours (300 min)
          recent=$(find data -maxdepth 1 -type f -name 'polymarket_enriched_fast_*.csv' -mmin -300 | sort | tail -n1 || true)
          if [ -n "$recent" ]; then
            echo "Using recent CSV: $recent"
          else
            echo "No recent CSV found; fetching a new one."

            # 2) Use a smaller scope on CI and be verbose; unbuffered for live logs
            #    (tune --topk/--concurrency to your taste; 120/8 is usually fine)
            python -u scripts/polymarket_enriched_fast.py \
              --topk 120 \
              --concurrency 8 \
              --verbose || { echo "Fetcher failed"; exit 1; }

            latest=$(ls -1t polymarket_enriched_fast_*.csv 2>/dev/null | head -n1 || true)
            if [ -n "$latest" ]; then
              mv "$latest" "data/$latest"
              recent="data/$latest"
              echo "Fetched CSV: $recent"
            else
              echo "No CSV produced by fetcher; will rely on previous or sample."
            fi
          fi

          # 3) List what we have for visibility
          ls -lh data | sed 's/^/data: /'

      - name: Generate site
        run: |
          python scripts/build_site_from_csv.py

      - name: Configure Git
        run: |
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Commit and push artifacts
        run: |
          set -e
          git add -A
          if git diff --cached --quiet; then
            echo "Nothing to commit"; exit 0
          fi
          git pull --rebase --autostash origin "$GITHUB_REF_NAME" || true
          if git push origin HEAD:"$GITHUB_REF_NAME"; then
            echo "Push ok"
          else
            echo "Push failed; retrying after rebase"
            git pull --rebase --autostash origin "$GITHUB_REF_NAME" || true
            git push origin HEAD:"$GITHUB_REF_NAME"
          fi
